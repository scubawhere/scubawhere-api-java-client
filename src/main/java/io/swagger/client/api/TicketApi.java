/**
 * Scubawhere API Documentation
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.BasePrice;
import io.swagger.client.model.ErrorModel;
import io.swagger.client.model.InlineResponse2014;
import org.joda.time.LocalDate;
import io.swagger.client.model.Ticket;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TicketApi {
    private ApiClient apiClient;

    public TicketApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TicketApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for addTicket */
    private com.squareup.okhttp.Call addTicketCall(String name, List<Long> trips, BasePrice prices, String description, LocalDate availableFrom, LocalDate availableUntil, Boolean onlyPackaged, List<Long> boats, List<Long> boatrooms, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = prices;
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling addTicket(Async)");
        }
        
        // verify the required parameter 'trips' is set
        if (trips == null) {
            throw new ApiException("Missing the required parameter 'trips' when calling addTicket(Async)");
        }
        
        // verify the required parameter 'prices' is set
        if (prices == null) {
            throw new ApiException("Missing the required parameter 'prices' when calling addTicket(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/ticket/add".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (description != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "description", description));
        if (availableFrom != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "available_from", availableFrom));
        if (availableUntil != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "available_until", availableUntil));
        if (onlyPackaged != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "only_packaged", onlyPackaged));
        if (trips != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "trips", trips));
        if (boats != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "boats", boats));
        if (boatrooms != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "boatrooms", boatrooms));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create a new ticket
     * 
     * @param name  (required)
     * @param trips  (required)
     * @param prices  (required)
     * @param description  (optional)
     * @param availableFrom  (optional)
     * @param availableUntil  (optional)
     * @param onlyPackaged  (optional)
     * @param boats  (optional)
     * @param boatrooms  (optional)
     * @return InlineResponse2014
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2014 addTicket(String name, List<Long> trips, BasePrice prices, String description, LocalDate availableFrom, LocalDate availableUntil, Boolean onlyPackaged, List<Long> boats, List<Long> boatrooms) throws ApiException {
        ApiResponse<InlineResponse2014> resp = addTicketWithHttpInfo(name, trips, prices, description, availableFrom, availableUntil, onlyPackaged, boats, boatrooms);
        return resp.getData();
    }

    /**
     * Create a new ticket
     * 
     * @param name  (required)
     * @param trips  (required)
     * @param prices  (required)
     * @param description  (optional)
     * @param availableFrom  (optional)
     * @param availableUntil  (optional)
     * @param onlyPackaged  (optional)
     * @param boats  (optional)
     * @param boatrooms  (optional)
     * @return ApiResponse&lt;InlineResponse2014&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2014> addTicketWithHttpInfo(String name, List<Long> trips, BasePrice prices, String description, LocalDate availableFrom, LocalDate availableUntil, Boolean onlyPackaged, List<Long> boats, List<Long> boatrooms) throws ApiException {
        com.squareup.okhttp.Call call = addTicketCall(name, trips, prices, description, availableFrom, availableUntil, onlyPackaged, boats, boatrooms, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2014>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new ticket (asynchronously)
     * 
     * @param name  (required)
     * @param trips  (required)
     * @param prices  (required)
     * @param description  (optional)
     * @param availableFrom  (optional)
     * @param availableUntil  (optional)
     * @param onlyPackaged  (optional)
     * @param boats  (optional)
     * @param boatrooms  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addTicketAsync(String name, List<Long> trips, BasePrice prices, String description, LocalDate availableFrom, LocalDate availableUntil, Boolean onlyPackaged, List<Long> boats, List<Long> boatrooms, final ApiCallback<InlineResponse2014> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addTicketCall(name, trips, prices, description, availableFrom, availableUntil, onlyPackaged, boats, boatrooms, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2014>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteTicket */
    private com.squareup.okhttp.Call deleteTicketCall(String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteTicket(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/ticket/delete".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete a ticket
     * 
     * @param name  (required)
     * @return InlineResponse2014
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2014 deleteTicket(String name) throws ApiException {
        ApiResponse<InlineResponse2014> resp = deleteTicketWithHttpInfo(name);
        return resp.getData();
    }

    /**
     * Delete a ticket
     * 
     * @param name  (required)
     * @return ApiResponse&lt;InlineResponse2014&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2014> deleteTicketWithHttpInfo(String name) throws ApiException {
        com.squareup.okhttp.Call call = deleteTicketCall(name, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2014>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a ticket (asynchronously)
     * 
     * @param name  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTicketAsync(String name, final ApiCallback<InlineResponse2014> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTicketCall(name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2014>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for editTicket */
    private com.squareup.okhttp.Call editTicketCall(Long id, String name, List<Long> trips, BasePrice prices, String description, LocalDate availableFrom, LocalDate availableUntil, Boolean onlyPackaged, List<Long> boats, List<Long> boatrooms, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = prices;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling editTicket(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling editTicket(Async)");
        }
        
        // verify the required parameter 'trips' is set
        if (trips == null) {
            throw new ApiException("Missing the required parameter 'trips' when calling editTicket(Async)");
        }
        
        // verify the required parameter 'prices' is set
        if (prices == null) {
            throw new ApiException("Missing the required parameter 'prices' when calling editTicket(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/ticket/edit".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "id", id));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (description != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "description", description));
        if (availableFrom != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "available_from", availableFrom));
        if (availableUntil != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "available_until", availableUntil));
        if (onlyPackaged != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "only_packaged", onlyPackaged));
        if (trips != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "trips", trips));
        if (boats != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "boats", boats));
        if (boatrooms != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "boatrooms", boatrooms));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update an existing ticket
     * 
     * @param id  (required)
     * @param name  (required)
     * @param trips  (required)
     * @param prices  (required)
     * @param description  (optional)
     * @param availableFrom  (optional)
     * @param availableUntil  (optional)
     * @param onlyPackaged  (optional)
     * @param boats  (optional)
     * @param boatrooms  (optional)
     * @return InlineResponse2014
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2014 editTicket(Long id, String name, List<Long> trips, BasePrice prices, String description, LocalDate availableFrom, LocalDate availableUntil, Boolean onlyPackaged, List<Long> boats, List<Long> boatrooms) throws ApiException {
        ApiResponse<InlineResponse2014> resp = editTicketWithHttpInfo(id, name, trips, prices, description, availableFrom, availableUntil, onlyPackaged, boats, boatrooms);
        return resp.getData();
    }

    /**
     * Update an existing ticket
     * 
     * @param id  (required)
     * @param name  (required)
     * @param trips  (required)
     * @param prices  (required)
     * @param description  (optional)
     * @param availableFrom  (optional)
     * @param availableUntil  (optional)
     * @param onlyPackaged  (optional)
     * @param boats  (optional)
     * @param boatrooms  (optional)
     * @return ApiResponse&lt;InlineResponse2014&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2014> editTicketWithHttpInfo(Long id, String name, List<Long> trips, BasePrice prices, String description, LocalDate availableFrom, LocalDate availableUntil, Boolean onlyPackaged, List<Long> boats, List<Long> boatrooms) throws ApiException {
        com.squareup.okhttp.Call call = editTicketCall(id, name, trips, prices, description, availableFrom, availableUntil, onlyPackaged, boats, boatrooms, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2014>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an existing ticket (asynchronously)
     * 
     * @param id  (required)
     * @param name  (required)
     * @param trips  (required)
     * @param prices  (required)
     * @param description  (optional)
     * @param availableFrom  (optional)
     * @param availableUntil  (optional)
     * @param onlyPackaged  (optional)
     * @param boats  (optional)
     * @param boatrooms  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editTicketAsync(Long id, String name, List<Long> trips, BasePrice prices, String description, LocalDate availableFrom, LocalDate availableUntil, Boolean onlyPackaged, List<Long> boats, List<Long> boatrooms, final ApiCallback<InlineResponse2014> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editTicketCall(id, name, trips, prices, description, availableFrom, availableUntil, onlyPackaged, boats, boatrooms, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2014>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAllAvailableTickets */
    private com.squareup.okhttp.Call getAllAvailableTicketsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/ticket/only-available".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve all tickets that are available to booked today
     * 
     * @return List&lt;Ticket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Ticket> getAllAvailableTickets() throws ApiException {
        ApiResponse<List<Ticket>> resp = getAllAvailableTicketsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve all tickets that are available to booked today
     * 
     * @return ApiResponse&lt;List&lt;Ticket&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Ticket>> getAllAvailableTicketsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAllAvailableTicketsCall(null, null);
        Type localVarReturnType = new TypeToken<List<Ticket>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve all tickets that are available to booked today (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllAvailableTicketsAsync(final ApiCallback<List<Ticket>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllAvailableTicketsCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Ticket>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAllTickets */
    private com.squareup.okhttp.Call getAllTicketsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/ticket/all".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve all tickets
     * 
     * @return List&lt;Ticket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Ticket> getAllTickets() throws ApiException {
        ApiResponse<List<Ticket>> resp = getAllTicketsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve all tickets
     * 
     * @return ApiResponse&lt;List&lt;Ticket&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Ticket>> getAllTicketsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAllTicketsCall(null, null);
        Type localVarReturnType = new TypeToken<List<Ticket>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve all tickets (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllTicketsAsync(final ApiCallback<List<Ticket>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllTicketsCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Ticket>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAllWithTrashedTickets */
    private com.squareup.okhttp.Call getAllWithTrashedTicketsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/ticket/all-with-trashed".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve all tickets
     * 
     * @return List&lt;Ticket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Ticket> getAllWithTrashedTickets() throws ApiException {
        ApiResponse<List<Ticket>> resp = getAllWithTrashedTicketsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieve all tickets
     * 
     * @return ApiResponse&lt;List&lt;Ticket&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Ticket>> getAllWithTrashedTicketsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAllWithTrashedTicketsCall(null, null);
        Type localVarReturnType = new TypeToken<List<Ticket>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve all tickets (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllWithTrashedTicketsAsync(final ApiCallback<List<Ticket>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllWithTrashedTicketsCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Ticket>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getTicket */
    private com.squareup.okhttp.Call getTicketCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTicket(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/ticket".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "id", id));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve a ticket by ID
     * 
     * @param id  (required)
     * @return Ticket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Ticket getTicket(Long id) throws ApiException {
        ApiResponse<Ticket> resp = getTicketWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Retrieve a ticket by ID
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Ticket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Ticket> getTicketWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = getTicketCall(id, null, null);
        Type localVarReturnType = new TypeToken<Ticket>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a ticket by ID (asynchronously)
     * 
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTicketAsync(Long id, final ApiCallback<Ticket> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTicketCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Ticket>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
