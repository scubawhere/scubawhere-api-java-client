/**
 * Scubawhere API Documentation
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.Trip;
import java.util.ArrayList;
import java.util.List;
import org.joda.time.LocalDate;


/**
 * Ticket
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2016-11-08T09:39:43.225Z")
public class Ticket   {
  @SerializedName("id")
  private Long id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("only_packaged")
  private Boolean onlyPackaged = null;

  @SerializedName("available_from")
  private LocalDate availableFrom = null;

  @SerializedName("available_until")
  private LocalDate availableUntil = null;

  @SerializedName("trips")
  private List<Trip> trips = new ArrayList<Trip>();

  public Ticket id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(example = "null", value = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public Ticket name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Ticket description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Ticket onlyPackaged(Boolean onlyPackaged) {
    this.onlyPackaged = onlyPackaged;
    return this;
  }

   /**
   * Get onlyPackaged
   * @return onlyPackaged
  **/
  @ApiModelProperty(example = "null", value = "")
  public Boolean getOnlyPackaged() {
    return onlyPackaged;
  }

  public void setOnlyPackaged(Boolean onlyPackaged) {
    this.onlyPackaged = onlyPackaged;
  }

  public Ticket availableFrom(LocalDate availableFrom) {
    this.availableFrom = availableFrom;
    return this;
  }

   /**
   * Get availableFrom
   * @return availableFrom
  **/
  @ApiModelProperty(example = "null", value = "")
  public LocalDate getAvailableFrom() {
    return availableFrom;
  }

  public void setAvailableFrom(LocalDate availableFrom) {
    this.availableFrom = availableFrom;
  }

  public Ticket availableUntil(LocalDate availableUntil) {
    this.availableUntil = availableUntil;
    return this;
  }

   /**
   * Get availableUntil
   * @return availableUntil
  **/
  @ApiModelProperty(example = "null", value = "")
  public LocalDate getAvailableUntil() {
    return availableUntil;
  }

  public void setAvailableUntil(LocalDate availableUntil) {
    this.availableUntil = availableUntil;
  }

  public Ticket trips(List<Trip> trips) {
    this.trips = trips;
    return this;
  }

  public Ticket addTripsItem(Trip tripsItem) {
    this.trips.add(tripsItem);
    return this;
  }

   /**
   * Get trips
   * @return trips
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<Trip> getTrips() {
    return trips;
  }

  public void setTrips(List<Trip> trips) {
    this.trips = trips;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ticket ticket = (Ticket) o;
    return Objects.equals(this.id, ticket.id) &&
        Objects.equals(this.name, ticket.name) &&
        Objects.equals(this.description, ticket.description) &&
        Objects.equals(this.onlyPackaged, ticket.onlyPackaged) &&
        Objects.equals(this.availableFrom, ticket.availableFrom) &&
        Objects.equals(this.availableUntil, ticket.availableUntil) &&
        Objects.equals(this.trips, ticket.trips);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, description, onlyPackaged, availableFrom, availableUntil, trips);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ticket {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    onlyPackaged: ").append(toIndentedString(onlyPackaged)).append("\n");
    sb.append("    availableFrom: ").append(toIndentedString(availableFrom)).append("\n");
    sb.append("    availableUntil: ").append(toIndentedString(availableUntil)).append("\n");
    sb.append("    trips: ").append(toIndentedString(trips)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

