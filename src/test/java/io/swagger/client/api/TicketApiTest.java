/**
 * Scubawhere API Documentation
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.BasePrice;
import io.swagger.client.model.ErrorModel;
import io.swagger.client.model.InlineResponse2014;
import org.joda.time.LocalDate;
import io.swagger.client.model.Ticket;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TicketApi
 */
public class TicketApiTest {

    private final TicketApi api = new TicketApi();

    
    /**
     * Create a new ticket
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addTicketTest() throws ApiException {
        String name = null;
        List<Long> trips = null;
        BasePrice prices = null;
        String description = null;
        LocalDate availableFrom = null;
        LocalDate availableUntil = null;
        Boolean onlyPackaged = null;
        List<Long> boats = null;
        List<Long> boatrooms = null;
        // InlineResponse2014 response = api.addTicket(name, trips, prices, description, availableFrom, availableUntil, onlyPackaged, boats, boatrooms);

        // TODO: test validations
    }
    
    /**
     * Delete a ticket
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTicketTest() throws ApiException {
        String name = null;
        // InlineResponse2014 response = api.deleteTicket(name);

        // TODO: test validations
    }
    
    /**
     * Update an existing ticket
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void editTicketTest() throws ApiException {
        Long id = null;
        String name = null;
        List<Long> trips = null;
        BasePrice prices = null;
        String description = null;
        LocalDate availableFrom = null;
        LocalDate availableUntil = null;
        Boolean onlyPackaged = null;
        List<Long> boats = null;
        List<Long> boatrooms = null;
        // InlineResponse2014 response = api.editTicket(id, name, trips, prices, description, availableFrom, availableUntil, onlyPackaged, boats, boatrooms);

        // TODO: test validations
    }
    
    /**
     * Retrieve all tickets that are available to booked today
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllAvailableTicketsTest() throws ApiException {
        // List<Ticket> response = api.getAllAvailableTickets();

        // TODO: test validations
    }
    
    /**
     * Retrieve all tickets
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllTicketsTest() throws ApiException {
        // List<Ticket> response = api.getAllTickets();

        // TODO: test validations
    }
    
    /**
     * Retrieve all tickets
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllWithTrashedTicketsTest() throws ApiException {
        // List<Ticket> response = api.getAllWithTrashedTickets();

        // TODO: test validations
    }
    
    /**
     * Retrieve a ticket by ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTicketTest() throws ApiException {
        Long id = null;
        // Ticket response = api.getTicket(id);

        // TODO: test validations
    }
    
}
