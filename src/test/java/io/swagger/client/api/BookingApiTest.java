/**
 * Scubawhere API Documentation
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.InlineResponse20010;
import io.swagger.client.model.ErrorModel;
import io.swagger.client.model.InlineResponse2008;
import org.joda.time.LocalDate;
import io.swagger.client.model.InlineResponse2009;
import io.swagger.client.model.InlineResponse20011;
import io.swagger.client.model.InlineResponse2003;
import io.swagger.client.model.InlineResponse20012;
import io.swagger.client.model.InlineResponse20017;
import io.swagger.client.model.InlineResponse20014;
import io.swagger.client.model.InlineResponse20013;
import io.swagger.client.model.Booking;
import io.swagger.client.model.InlineResponse2007;
import io.swagger.client.model.InlineResponse20015;
import io.swagger.client.model.InlineResponse20016;
import io.swagger.client.model.InlineResponse201;
import io.swagger.client.model.InlineResponse20018;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BookingApi
 */
public class BookingApiTest {

    private final BookingApi api = new BookingApi();

    
    /**
     * Add a package / course / ticket with its session to the booking
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addBookingDetailTest() throws ApiException {
        Long bookingId = null;
        Long customerId = null;
        Long ticketId = null;
        Long sessionId = null;
        Long boatroomId = null;
        Long trainingSessionId = null;
        Boolean temporary = null;
        Long packageId = null;
        Long packagefacadeId = null;
        Long courseId = null;
        // InlineResponse20010 response = api.addBookingDetail(bookingId, customerId, ticketId, sessionId, boatroomId, trainingSessionId, temporary, packageId, packagefacadeId, courseId);

        // TODO: test validations
    }
    
    /**
     * Attach an accommodation booking to a booking
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attachAccommodationTest() throws ApiException {
        Long bookingId = null;
        Long accommodationId = null;
        Long customerId = null;
        LocalDate start = null;
        LocalDate end = null;
        // InlineResponse2008 response = api.attachAccommodation(bookingId, accommodationId, customerId, start, end);

        // TODO: test validations
    }
    
    /**
     * Attach an addon to a trip of a booking
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attachAddonTest() throws ApiException {
        Long bookingId = null;
        Long bookingdetailId = null;
        Long addonId = null;
        Long quantity = null;
        Long packagefacadeId = null;
        // InlineResponse2009 response = api.attachAddon(bookingId, bookingdetailId, addonId, quantity, packagefacadeId);

        // TODO: test validations
    }
    
    /**
     * Attach a pickup location for a booking
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void attachPickupTest() throws ApiException {
        Long bookingId = null;
        String location = null;
        LocalDate date = null;
        String time = null;
        // InlineResponse20011 response = api.attachPickup(bookingId, location, date, time);

        // TODO: test validations
    }
    
    /**
     * Cancel a booking
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelBookingTest() throws ApiException {
        Long bookingId = null;
        // InlineResponse2003 response = api.cancelBooking(bookingId);

        // TODO: test validations
    }
    
    /**
     * Confirm a booking and all of its sessions and notify the lead customer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void confirmBookingTest() throws ApiException {
        Long bookingId = null;
        // InlineResponse20012 response = api.confirmBooking(bookingId);

        // TODO: test validations
    }
    
    /**
     * Delete a booking by ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBookingTest() throws ApiException {
        Long id = null;
        // InlineResponse2003 response = api.deleteBooking(id);

        // TODO: test validations
    }
    
    /**
     * Dettach an accommodation booking to a booking
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dettachAccommodationTest() throws ApiException {
        Long bookingId = null;
        Long accommodationId = null;
        Long customerId = null;
        LocalDate start = null;
        // InlineResponse20017 response = api.dettachAccommodation(bookingId, accommodationId, customerId, start);

        // TODO: test validations
    }
    
    /**
     * Dettach an addon to a trip of a booking
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dettachAddonTest() throws ApiException {
        Long bookingId = null;
        Long bookingdetailId = null;
        Long addonId = null;
        Long packagefacadeId = null;
        // InlineResponse20017 response = api.dettachAddon(bookingId, bookingdetailId, addonId, packagefacadeId);

        // TODO: test validations
    }
    
    /**
     * Dettach a pickup location for a booking
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dettachPickupTest() throws ApiException {
        Long bookingId = null;
        Long id = null;
        // InlineResponse2003 response = api.dettachPickup(bookingId, id);

        // TODO: test validations
    }
    
    /**
     * Edit the information related to a booking
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void editBookingInfoTest() throws ApiException {
        Long bookingId = null;
        Double discount = null;
        String comment = null;
        // InlineResponse20014 response = api.editBookingInfo(bookingId, discount, comment);

        // TODO: test validations
    }
    
    /**
     * Get all bookings matching a filter
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void filterBookingsTest() throws ApiException {
        String reference = null;
        LocalDate date = null;
        String lastname = null;
        // InlineResponse20013 response = api.filterBookings(reference, date, lastname);

        // TODO: test validations
    }
    
    /**
     * Retrieve all bookings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllBookingsTest() throws ApiException {
        // List<Booking> response = api.getAllBookings();

        // TODO: test validations
    }
    
    /**
     * Retrieve all bookings including any deleted models
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllWithTrashedBookingsTest() throws ApiException {
        // List<Booking> response = api.getAllWithTrashedBookings();

        // TODO: test validations
    }
    
    /**
     * Retrieve a booking by ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBookingTest() throws ApiException {
        Long id = null;
        // InlineResponse2007 response = api.getBooking(id);

        // TODO: test validations
    }
    
    /**
     * Get all bookings for a customer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomerBookingsTest() throws ApiException {
        Long customerId = null;
        // InlineResponse20013 response = api.getCustomerBookings(customerId);

        // TODO: test validations
    }
    
    /**
     * Retrieve all payments made for a booking
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPaymentsTest() throws ApiException {
        Long bookingId = null;
        // InlineResponse20015 response = api.getPayments(bookingId);

        // TODO: test validations
    }
    
    /**
     * Retrieve all refunds for a booking
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRefundsTest() throws ApiException {
        Long bookingId = null;
        // InlineResponse20016 response = api.getRefunds(bookingId);

        // TODO: test validations
    }
    
    /**
     * Get all bookings made today
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTodaysBookingsTest() throws ApiException {
        // InlineResponse20013 response = api.getTodaysBookings();

        // TODO: test validations
    }
    
    /**
     * Get all bookings made today
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTommorowsBookingsTest() throws ApiException {
        // InlineResponse20013 response = api.getTommorowsBookings();

        // TODO: test validations
    }
    
    /**
     * Create a new empty booking
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void initBookingTest() throws ApiException {
        String source = null;
        Long agentId = null;
        String agentReference = null;
        // InlineResponse201 response = api.initBooking(source, agentId, agentReference);

        // TODO: test validations
    }
    
    /**
     * Remove a detail from a booking
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeBookingDetailTest() throws ApiException {
        Long bookingId = null;
        Long bookingdetailId = null;
        // InlineResponse20017 response = api.removeBookingDetail(bookingId, bookingdetailId);

        // TODO: test validations
    }
    
    /**
     * Resend the confirmation email to the lead customer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resendConfirmationTest() throws ApiException {
        Long bookingId = null;
        // InlineResponse2003 response = api.resendConfirmation(bookingId);

        // TODO: test validations
    }
    
    /**
     * Reserve a booking and its sessions capcity until a set date
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reserveBookingTest() throws ApiException {
        Long bookingId = null;
        LocalDate reservedUntil = null;
        // InlineResponse20018 response = api.reserveBooking(bookingId, reservedUntil);

        // TODO: test validations
    }
    
    /**
     * Save a booking as a quote and release all capacity of sessions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveBookingTest() throws ApiException {
        Long bookingId = null;
        // InlineResponse2003 response = api.saveBooking(bookingId);

        // TODO: test validations
    }
    
    /**
     * Set the lead customer for a booking
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setLeadCustomerTest() throws ApiException {
        Long bookingId = null;
        Long customerId = null;
        // InlineResponse2003 response = api.setLeadCustomer(bookingId, customerId);

        // TODO: test validations
    }
    
}
