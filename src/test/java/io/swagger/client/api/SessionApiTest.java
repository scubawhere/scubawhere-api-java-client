/**
 * Scubawhere API Documentation
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.InlineResponse20043;
import io.swagger.client.model.ErrorModel;
import org.joda.time.LocalDate;
import io.swagger.client.model.InlineResponse2003;
import io.swagger.client.model.InlineResponse20044;
import io.swagger.client.model.InlineResponse20045;
import io.swagger.client.model.Session;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SessionApi
 */
public class SessionApiTest {

    private final SessionApi api = new SessionApi();

    
    /**
     * Create a new session
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSessionTest() throws ApiException {
        LocalDate start = null;
        Long boatId = null;
        Long tripId = null;
        // InlineResponse20043 response = api.createSession(start, boatId, tripId);

        // TODO: test validations
    }
    
    /**
     * Delete a session by ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSessionTest() throws ApiException {
        Long id = null;
        // InlineResponse2003 response = api.deleteSession(id);

        // TODO: test validations
    }
    
    /**
     * Update a session by ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void editSessionTest() throws ApiException {
        Long id = null;
        LocalDate start = null;
        Long boatId = null;
        // InlineResponse20044 response = api.editSession(id, start, boatId);

        // TODO: test validations
    }
    
    /**
     * Retrieve all of tsessions that match a filter
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void filterSessionsTest() throws ApiException {
        LocalDate after = null;
        LocalDate before = null;
        Long tripId = null;
        Long ticketId = null;
        Long packageId = null;
        Long courseId = null;
        // InlineResponse20045 response = api.filterSessions(after, before, tripId, ticketId, packageId, courseId);

        // TODO: test validations
    }
    
    /**
     * Retrieve all sessions including any deleted models
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllSessionsTest() throws ApiException {
        // List<Session> response = api.getAllSessions();

        // TODO: test validations
    }
    
    /**
     * Retrieve all sessions including any deleted models
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllWithTrashedSessionsTest() throws ApiException {
        // List<Session> response = api.getAllWithTrashedSessions();

        // TODO: test validations
    }
    
    /**
     * Retrieve the customer manifest for this session
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getManifestTest() throws ApiException {
        Long id = null;
        // InlineResponse20043 response = api.getManifest(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve a session by ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSessionTest() throws ApiException {
        Long id = null;
        // InlineResponse20043 response = api.getSession(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve all of todays sessions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTodaySessionsTest() throws ApiException {
        // InlineResponse20045 response = api.getTodaySessions();

        // TODO: test validations
    }
    
    /**
     * Retrieve all of tommorows sessions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTommorowSessionsTest() throws ApiException {
        // InlineResponse20045 response = api.getTommorowSessions();

        // TODO: test validations
    }
    
}
