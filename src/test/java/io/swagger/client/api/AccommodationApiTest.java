/**
 * Scubawhere API Documentation
 * This is the documentation for scubawhere's RMS API. This API is only to be used by authorized parties with valid auth tokens.  [Learn about scubawhere](http://www.scubawhere.com) to become an authorized consumer of our API 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bryan@scubawhere.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.InlineResponse200;
import io.swagger.client.model.ErrorModel;
import io.swagger.client.model.InlineResponse2004;
import org.joda.time.LocalDate;
import io.swagger.client.model.Accommodation;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccommodationApi
 */
public class AccommodationApiTest {

    private final AccommodationApi api = new AccommodationApi();

    
    /**
     * 
     *
     * Create an accommodation
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addAccommodationTest() throws ApiException {
        String name = null;
        Long capacity = null;
        Integer basePrices = null;
        String description = null;
        // InlineResponse200 response = api.addAccommodation(name, capacity, basePrices, description);

        // TODO: test validations
    }
    
    /**
     * Delete an accommodation by ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAccommodationTest() throws ApiException {
        Long body = null;
        // InlineResponse200 response = api.deleteAccommodation(body);

        // TODO: test validations
    }
    
    /**
     * Create a new agent
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void editAgentTest() throws ApiException {
        Long id = null;
        Long name = null;
        String branchName = null;
        String branchAddress = null;
        String branchPhone = null;
        String branchEmail = null;
        Float commission = null;
        String terms = null;
        String website = null;
        String billingAddress = null;
        String billingPhone = null;
        String billingEmail = null;
        // InlineResponse2004 response = api.editAgent(id, name, branchName, branchAddress, branchPhone, branchEmail, commission, terms, website, billingAddress, billingPhone, billingEmail);

        // TODO: test validations
    }
    
    /**
     * Get all the accommodations matching a filter
     *
     * Get all the accommodations and their bookings between certain dates and / or an accommodation id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void filterAccommodationTest() throws ApiException {
        LocalDate before = null;
        LocalDate after = null;
        Long accommodationId = null;
        // InlineResponse200 response = api.filterAccommodation(before, after, accommodationId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve an accommodation by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findAccommodationTest() throws ApiException {
        List<Long> id = null;
        // InlineResponse200 response = api.findAccommodation(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve all accommodation
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllAccommodationsTest() throws ApiException {
        // List<Accommodation> response = api.getAllAccommodations();

        // TODO: test validations
    }
    
    /**
     * Retrieve all accommodation including any deleted models
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllWithTrashedAccommodationsTest() throws ApiException {
        // List<Accommodation> response = api.getAllWithTrashedAccommodations();

        // TODO: test validations
    }
    
    /**
     * Update an Accommodation
     *
     * Updates the accommodation by id using the specified fields
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAccommodationTest() throws ApiException {
        Long id = null;
        String name = null;
        Long capacity = null;
        // InlineResponse200 response = api.updateAccommodation(id, name, capacity);

        // TODO: test validations
    }
    
}
